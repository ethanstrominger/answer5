const { makeQuestionJson } = require('../../src/questionDBUtil');
const { questionSchema } = require('../../src/questionDBUtil');
const assert = require('assert');
const mongoose = require('mongoose');

('use strict');

// TODO: Investigate using chai
// const chai = require('chai');
// const expect = chai.expect;

// TODO: Figure out how to have different tables different envs
const QuestionModel = mongoose.model('QuestionaTestEnv', questionSchema);

describe('Database Tests', function() {
  before(function(done) {
    mongoose.connect('mongodb://localhost/ethanstromingerdb');
    const db = mongoose.connection;
    db.on('error', console.error.bind(console, 'connection error'));
    db.once('open', function() {
      console.log('We are connected to test database!');
      done();
      // TODO: Figure out if can delete in the before function
      // QuestionModel.count({}, function(err, count) {
      //   if (err) {
      //     console.log('Error', err);
      //   } else {
      //     console.log('Number of docs before delete: ', count);
      //   }
      // });
      // QuestionModel.remove({}, function(err, res) {
      //     if (err) {
      //       console.log(err);
      //     } else {
      //       console.log('Deleted', res);
      //     }
      //   });
      //   QuestionModel.count({}, function(err, count) {
      //     console.log('Number of docs 2: ', count);
      //     console.log('DONE WITH DONE');
      //   });
    });
  });

  describe('Test Database', function() {
    it('Deleting all records', function(done) {
      QuestionModel.deleteMany({}, function(err, res) {
        if (err) {
          throw err;
        }
        return done();
      });
    });

    it('New question saved', function(done) {
      var questionJson = makeQuestionJson('What is 7*7', '49', '0, 1, 14');
      var testName = QuestionModel({
        question_text: 'What is 7*7',
        answer: '49'
      });
      var testName = QuestionModel(questionJson);
      testName.save(done);
    });

    it('Dont save if required info missing', function(done) {
      var wrongSave = QuestionModel({
        question_text: 'What is 7*6',
        answer: '42'
      });
      wrongSave.save(err => {
        if (err) {
          return done();
        }
        throw new Error('Should generate error!');
      });
    });

    it('Can provide extra info', function(done) {
      var extraSave = QuestionModel({
        question_text: 'What is 8-2',
        answer: '6',
        distractors: '4, 10, 16',
        bogus_field: 'bogus'
      });
      extraSave.save(done);
      //   TODO: Add check that bogus field is not saved
    });

    it('Should retrieve data from test database', function(done) {
      QuestionModel.find({ question_text: 'What is 7*7' }, (err, name) => {
        if (err) {
          throw err;
        }
        if (name.length === 0) {
          throw new Error('No data!');
        }
        done();
      });
    });
  });

  after(function(done) {
    // TODO: Consider having flag if you want to clean up database
    //  mongoose.connection.db.dropDatabase(function() {
    mongoose.connection.close(done);
    //  });
  });
});
describe('Array', function() {
  describe('#indexOf()', function() {
    it('should return -1 when the value is not present', function() {
      assert.equal(-1, [1, 2, 3].indexOf(4));
    });
  });
});
